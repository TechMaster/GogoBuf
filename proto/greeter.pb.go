// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: greeter.proto

/*
	Package greeter is a generated protocol buffer package.

	It is generated from these files:
		greeter.proto

	It has these top-level messages:
		HelloRequest
		Permission
		HelloResponse
*/
package greeter

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"MyField1" pg:",array", sql:",pk"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptorGreeter, []int{0} }

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Permission struct {
	// Tên của service (ví dụ 'blog')
	Service string `protobuf:"bytes,1,req,name=service" json:"service" sql:",pk"`
	// Các phương thức của service
	Method string `protobuf:"bytes,2,req,name=method" json:"method" sql:",pk"`
	// Mảng các quyền hạn (Role) cho phép truy cập vào method (nếu null tức là public method)
	Roles []int32 `protobuf:"varint,3,rep,name=roles" json:"roles,omitempty" pg:",array"`
	// Method có phải là public hay không
	IsPublic bool `protobuf:"varint,4,req,name=is_public,json=isPublic" json:"is_public"`
}

func (m *Permission) Reset()                    { *m = Permission{} }
func (*Permission) ProtoMessage()               {}
func (*Permission) Descriptor() ([]byte, []int) { return fileDescriptorGreeter, []int{1} }

func (m *Permission) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Permission) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Permission) GetRoles() []int32 {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *Permission) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

type HelloResponse struct {
	Greeting string `protobuf:"bytes,2,opt,name=greeting" json:"greeting"`
}

func (m *HelloResponse) Reset()                    { *m = HelloResponse{} }
func (*HelloResponse) ProtoMessage()               {}
func (*HelloResponse) Descriptor() ([]byte, []int) { return fileDescriptorGreeter, []int{2} }

func (m *HelloResponse) GetGreeting() string {
	if m != nil {
		return m.Greeting
	}
	return ""
}

var E_Description = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         50056,
	Name:          "description",
	Tag:           "bytes,50056,opt,name=description",
	Filename:      "greeter.proto",
}

var E_InternalMethod = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         50057,
	Name:          "internalMethod",
	Tag:           "varint,50057,opt,name=internalMethod",
	Filename:      "greeter.proto",
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "HelloRequest")
	proto.RegisterType((*Permission)(nil), "Permission")
	proto.RegisterType((*HelloResponse)(nil), "HelloResponse")
	proto.RegisterExtension(E_Description)
	proto.RegisterExtension(E_InternalMethod)
}
func (this *HelloRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HelloRequest)
	if !ok {
		that2, ok := that.(HelloRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *Permission) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Permission)
	if !ok {
		that2, ok := that.(Permission)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if this.Roles[i] != that1.Roles[i] {
			return false
		}
	}
	if this.IsPublic != that1.IsPublic {
		return false
	}
	return true
}
func (this *HelloResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HelloResponse)
	if !ok {
		that2, ok := that.(HelloResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Greeting != that1.Greeting {
		return false
	}
	return true
}
func (this *HelloRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&greeter.HelloRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Permission) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&greeter.Permission{")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	if this.Roles != nil {
		s = append(s, "Roles: "+fmt.Sprintf("%#v", this.Roles)+",\n")
	}
	s = append(s, "IsPublic: "+fmt.Sprintf("%#v", this.IsPublic)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HelloResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&greeter.HelloResponse{")
	s = append(s, "Greeting: "+fmt.Sprintf("%#v", this.Greeting)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGreeter(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *HelloRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGreeter(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	return i, nil
}

func (m *Permission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Permission) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGreeter(dAtA, i, uint64(len(m.Service)))
	i += copy(dAtA[i:], m.Service)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGreeter(dAtA, i, uint64(len(m.Method)))
	i += copy(dAtA[i:], m.Method)
	if len(m.Roles) > 0 {
		for _, num := range m.Roles {
			dAtA[i] = 0x18
			i++
			i = encodeVarintGreeter(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x20
	i++
	if m.IsPublic {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *HelloResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintGreeter(dAtA, i, uint64(len(m.Greeting)))
	i += copy(dAtA[i:], m.Greeting)
	return i, nil
}

func encodeVarintGreeter(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HelloRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGreeter(uint64(l))
	return n
}

func (m *Permission) Size() (n int) {
	var l int
	_ = l
	l = len(m.Service)
	n += 1 + l + sovGreeter(uint64(l))
	l = len(m.Method)
	n += 1 + l + sovGreeter(uint64(l))
	if len(m.Roles) > 0 {
		for _, e := range m.Roles {
			n += 1 + sovGreeter(uint64(e))
		}
	}
	n += 2
	return n
}

func (m *HelloResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Greeting)
	n += 1 + l + sovGreeter(uint64(l))
	return n
}

func sovGreeter(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGreeter(x uint64) (n int) {
	return sovGreeter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HelloRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HelloRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Permission) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Permission{`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`Roles:` + fmt.Sprintf("%v", this.Roles) + `,`,
		`IsPublic:` + fmt.Sprintf("%v", this.IsPublic) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HelloResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HelloResponse{`,
		`Greeting:` + fmt.Sprintf("%v", this.Greeting) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGreeter(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HelloRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGreeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGreeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGreeter
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGreeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGreeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Permission) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGreeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Permission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Permission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGreeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGreeter
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGreeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGreeter
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGreeter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Roles = append(m.Roles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGreeter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGreeter
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGreeter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Roles = append(m.Roles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGreeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPublic = bool(v != 0)
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipGreeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGreeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("service")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("method")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("is_public")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelloResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGreeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Greeting", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGreeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGreeter
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Greeting = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGreeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGreeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGreeter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGreeter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGreeter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGreeter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGreeter
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGreeter
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGreeter(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGreeter = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGreeter   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("greeter.proto", fileDescriptorGreeter) }

var fileDescriptorGreeter = []byte{
	// 471 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x7d, 0xf9, 0xd1, 0x38, 0xaf, 0xa4, 0x88, 0x1b, 0x90, 0xd5, 0xe1, 0x6c, 0x2c, 0x21,
	0x99, 0x12, 0x5c, 0x95, 0x31, 0x48, 0x0c, 0x16, 0xa2, 0x5d, 0x0a, 0xc5, 0x03, 0x2b, 0x72, 0x92,
	0xc3, 0x3d, 0xe1, 0xf8, 0xdc, 0x3b, 0x1b, 0x29, 0x1b, 0x1b, 0xb0, 0xf1, 0x07, 0xf0, 0x07, 0x30,
	0x31, 0x77, 0x66, 0xca, 0xd8, 0x91, 0xc9, 0x22, 0x66, 0x41, 0x4c, 0x55, 0xfe, 0x02, 0xe4, 0xb3,
	0xad, 0x04, 0x24, 0x94, 0xcd, 0xef, 0xbd, 0xcf, 0xf7, 0x2b, 0xdf, 0xf7, 0x3d, 0x18, 0x84, 0x82,
	0xd2, 0x94, 0x0a, 0x37, 0x11, 0x3c, 0xe5, 0xfb, 0x0f, 0x42, 0x96, 0x9e, 0x67, 0x63, 0x77, 0xc2,
	0x67, 0x87, 0x21, 0x0f, 0xf9, 0xa1, 0x6a, 0x8f, 0xb3, 0xd7, 0xaa, 0x52, 0x85, 0xfa, 0xaa, 0x71,
	0x2b, 0xe4, 0x3c, 0x8c, 0xe8, 0x9a, 0x9a, 0x52, 0x39, 0x11, 0x2c, 0x49, 0x79, 0x6d, 0x68, 0x3f,
	0x83, 0x1b, 0x27, 0x34, 0x8a, 0xb8, 0x4f, 0x2f, 0x32, 0x2a, 0x53, 0xfc, 0x18, 0x3a, 0x71, 0x30,
	0xa3, 0x06, 0xb2, 0x90, 0xd3, 0xf7, 0x0e, 0x16, 0xb9, 0xa9, 0xfd, 0xce, 0x4d, 0xfd, 0x74, 0xfe,
	0x94, 0xd1, 0x68, 0x7a, 0xb4, 0xca, 0xcd, 0xdb, 0x49, 0x38, 0xb2, 0x87, 0x81, 0x10, 0xc1, 0xdc,
	0x1e, 0x5a, 0xf2, 0x22, 0x1a, 0xd9, 0xc3, 0xe4, 0x8d, 0xed, 0x2b, 0x9d, 0xfd, 0x15, 0x01, 0x9c,
	0x51, 0x31, 0x63, 0x52, 0x32, 0x1e, 0xe3, 0xfb, 0xd0, 0x93, 0x54, 0xbc, 0x65, 0x93, 0xd2, 0xb1,
	0xe5, 0xf4, 0xbd, 0x5b, 0xa5, 0xe3, 0x2a, 0x37, 0xfb, 0x6b, 0x61, 0x43, 0xe0, 0x7b, 0xb0, 0x33,
	0xa3, 0xe9, 0x39, 0x9f, 0x1a, 0xad, 0xff, 0xb1, 0x35, 0x80, 0xef, 0x42, 0x57, 0xf0, 0x88, 0x4a,
	0xa3, 0x6d, 0xb5, 0x9d, 0xae, 0x77, 0x73, 0x95, 0x9b, 0xbb, 0x1b, 0xff, 0xe5, 0x57, 0x53, 0x7c,
	0x07, 0xfa, 0x4c, 0xbe, 0x4a, 0xb2, 0x71, 0xc4, 0x26, 0x46, 0xc7, 0x6a, 0x39, 0xba, 0xd7, 0x29,
	0x4d, 0x7d, 0x9d, 0xc9, 0x33, 0xd5, 0xb5, 0x8f, 0x60, 0x50, 0x07, 0x20, 0x13, 0x1e, 0x4b, 0x8a,
	0x2d, 0xd0, 0x55, 0xe6, 0x2c, 0x0e, 0x8d, 0x96, 0x4a, 0xa1, 0x96, 0x34, 0xdd, 0x87, 0x9f, 0x11,
	0xf4, 0x8e, 0xab, 0xb5, 0x60, 0x07, 0xba, 0x4a, 0x8e, 0x07, 0xee, 0x66, 0x8e, 0xfb, 0x7b, 0xee,
	0x5f, 0xae, 0xb6, 0x86, 0x0f, 0xa0, 0x77, 0xcc, 0xf9, 0xd4, 0x9b, 0xd3, 0xed, 0xec, 0x23, 0xd8,
	0x79, 0x99, 0xb1, 0x17, 0x59, 0xb0, 0x0d, 0xc5, 0xdf, 0x2e, 0x0d, 0xa8, 0x50, 0xeb, 0x49, 0x30,
	0x5f, 0x5c, 0x1a, 0xda, 0xc8, 0x83, 0xdd, 0x66, 0xcd, 0xe5, 0x0a, 0x88, 0x5b, 0x1d, 0x81, 0xdb,
	0x1c, 0x81, 0x7b, 0xaa, 0x32, 0x7c, 0xae, 0xc6, 0xd2, 0xf8, 0xf0, 0xbe, 0x5d, 0xbe, 0xd2, 0xdf,
	0x14, 0x8d, 0x4e, 0x60, 0x8f, 0xc5, 0x29, 0x15, 0x71, 0x10, 0x55, 0xf4, 0x56, 0x9b, 0x8f, 0xca,
	0x46, 0xf7, 0xff, 0xd1, 0x79, 0xc3, 0xab, 0x25, 0xd1, 0xbe, 0x2f, 0x89, 0x76, 0xbd, 0x24, 0xe8,
	0x5d, 0x41, 0xd0, 0x97, 0x82, 0xa0, 0x45, 0x41, 0xd0, 0x55, 0x41, 0xd0, 0x8f, 0x82, 0xa0, 0x5f,
	0x05, 0xd1, 0xae, 0x0b, 0x82, 0x3e, 0xfd, 0x24, 0xda, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x53,
	0x75, 0x19, 0x30, 0xef, 0x02, 0x00, 0x00,
}
